#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using UnityEngine;
using UnityEditor;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using Debug = UnityEngine.Debug;

public class AnnouncementWindow : EditorWindow
{
    public bool dontShowAgain;
    public WinState winState = WinState.Opening;

    private bool didViewN02;

    public enum WinState
    {
        Opening,
        Idle,
        Closing
    }
    
    public static void Init(int width, int height)
    {
        var win = CreateInstance<AnnouncementWindow>();
        win.position = new Rect(Screen.currentResolution.width / 2f - width / 2f,Screen.currentResolution.height / 2f - 100 / 2f, width, 100);
        win.startHeight = height;
        win.closingT = .07f;
        win.winHeight = height;
        win.dontShowAgain = Convert.ToBoolean(PlayerPrefs.GetInt("dontShowAgain"));
        win.ShowPopup();
    }

    private float startHeight, closingT;
    private int winHeight;
    private const string announcementPath = "Assets/NeonGamer/Shaders/EyeShaders/!Assets/Resources/Announcement.png";
    
    //-1 -> idle
    //0 -> fetching
    //1 -> success
    //2 -> failed
    private static int announcementState = -1;
    
    private static Texture2D announcementBack;
    private static Texture2D announcement
    {
        get
        {
            if (announcementBack) return announcementBack;
            if (announcementState == 0 || announcementState == 2)
                return null;
            
            announcementState = 0;
                
            var webClient = new WebClient();
            var image = Resources.Load<Texture2D>("Announcement");
            if (!image)
            {
                var imageBytes = webClient.DownloadData("https://raw.githubusercontent.com/NeonGamer/ShaderUIScript/refs/heads/main/Announcement.png");
                Directory.CreateDirectory(Path.GetDirectoryName(announcementPath));
                File.WriteAllBytes(announcementPath, imageBytes);
                AssetDatabase.Refresh();
                image = Resources.Load<Texture2D>("Announcement");
            }

            if (!image)
            {
                announcementState = 2;
                return null;
            }
            
            var texImporter = (TextureImporter)AssetImporter.GetAtPath(announcementPath);
            texImporter.textureType = TextureImporterType.GUI;
            texImporter.SaveAndReimport();
            
            announcementState = 1;
            if (!announcementBack) announcementBack = image;
            return announcementBack;
        }
    }
    
    public void Update()
    {
        switch (winState)
        {
            case WinState.Opening:
            {
                var newPosition = position;
                var oldHeight = newPosition.height;
        
                newPosition.height = (int)Mathf.Lerp(newPosition.height, winHeight + 5, .2f);
                newPosition.y += (oldHeight - newPosition.height) / 2f;
        
                position = new Rect(newPosition.x, newPosition.y, newPosition.width, newPosition.height);
        
                if (Mathf.Approximately(newPosition.height, winHeight)) winState = WinState.Idle;
        
                Repaint();
                break;
            }
            case WinState.Closing:
            {
                var newPosition = position;
                var oldHeight = newPosition.height;

                newPosition.height = Mathf.Lerp(startHeight, 100, closingT);
                
                closingT *= 1.08f;
                
                newPosition.y += (oldHeight - newPosition.height) / 2f;

                position = newPosition;
        
                if (Mathf.Approximately(newPosition.height, 100) || newPosition.height <= 100) Close();
        
                Repaint();
                break;
            }
        }
    }

    public void OnGUI()
    {
        //GUILayout.Label($"{position.width}x{position.height}");
        if (!announcement || announcementState != 1)
            GUILayout.Label("Failed to fetch announcement.");
        else
            GUI.Button(GUILayoutUtility.GetRect(position.width, announcement.height * (position.width / announcement.width)), announcement, "ControlLabel");            
        GUILayout.FlexibleSpace();
        using (new GUILayout.HorizontalScope())
        {
            dontShowAgain = EditorGUILayout.ToggleLeft("Don't show again.", dontShowAgain);

            if (GUILayout.Button("Visit n02 Gumroad"))
            {
                NeonsShaderGUI.PostShaderFeedback("", "Visited Gumroad", "15FF15");
                Process.Start("https://n02.gumroad.com");
                didViewN02 = true;
            }
            
            if (GUILayout.Button("Ok", GUILayout.Width(100)))
            {
                if (!didViewN02)
                    NeonsShaderGUI.PostShaderFeedback("", "Skipped Gumroad", "FF1515");
                PlayerPrefs.SetInt("dontShowAgain", Convert.ToInt16(dontShowAgain));
                winState = WinState.Closing;
            }
        }
    }
}

[Serializable]
public class EmbedData
{
    public string title;
    public string description;
    public int color;
}
    
[Serializable]
public class DiscordData
{
    public EmbedData[] embeds;
        
    public DiscordData(string title, string description, int color)
    {
        var data = new EmbedData
        {
            title = title,
            description = description,
            color = color
        };
        embeds = new[]
        {
            data
        };
    }
}

public class NeonsShaderGUI : ShaderGUI
{
    private static List<GUIItem> uiItems = new();
    private static Dictionary<Material, Dictionary<string, bool>> openStates = new();

    private static GUIStyle FoldoutStyle()
    {
        var newFoldoutStyle = new GUIStyle(GUI.skin.FindStyle("Foldout"))
        {
            margin = new RectOffset(9, 0, 0, 0),
            padding = new RectOffset(15, 0, 0, 0)
        };
        newFoldoutStyle.normal = GUI.skin.FindStyle("LargeLabel").normal;
        newFoldoutStyle.fontSize = 13;

        return newFoldoutStyle;
    }

    private static GUIStyle HelpBoxStyle(bool margin = false, bool padding = true, bool border = true)
    {
        var pad = padding ? 3 : 0;
        GUIStyle helpBoxStyle = border ? new GUIStyle(GUI.skin.FindStyle("HelpBox")) : new GUIStyle();
        helpBoxStyle.margin = new RectOffset(margin ? 35 : 0, 0, 0, margin ? 2 : 0);
        helpBoxStyle.padding = new RectOffset(pad, pad, pad, pad);
        return helpBoxStyle;
    }
    
    #region UI Stuff
    private enum UIType
    {
        Property,
        Block,
        Message
    }

    private class GUIItem
    {
        public UIType uiType;
        private MaterialProperty materialProperty;
        private MaterialEditor matEditor;
        private string displayName;
        private string parentName;
        public string fullPath;
        public bool isRoot;
        public GUIItem(MaterialEditor me, MaterialProperty materialProp, string name, string parentName, string path, UIType newUIType, bool root)
        {
            if (!openStates.ContainsKey((Material)me.target))
                openStates.Add((Material)me.target, new Dictionary<string, bool>());
            matEditor = me;
            materialProperty = materialProp;
            fullPath = path;
            this.parentName = parentName;
            displayName = name;
            isRoot = root;
            uiType = newUIType;
        }

        public void DrawProperty()
        {
            switch (uiType)
            {
                case UIType.Property:
                    if (materialProperty.flags != MaterialProperty.PropFlags.HideInInspector) matEditor.ShaderProperty(materialProperty, displayName);
                    break;
                case UIType.Block:
                    if (!openStates[(Material)matEditor.target].ContainsKey(fullPath))
                        openStates[(Material)matEditor.target].Add(fullPath, false);
                    using (new GUILayout.VerticalScope(HelpBoxStyle(false, false)))
                    {
                        var def = GUI.backgroundColor;
                        GUI.backgroundColor = new Color(0.2f, 0.2f, 0.2f);
                        using (new GUILayout.HorizontalScope(HelpBoxStyle()))
                            openStates[(Material)matEditor.target][fullPath] = EditorGUILayout.Foldout(openStates[(Material)matEditor.target][fullPath], displayName, true, FoldoutStyle());
                        GUI.backgroundColor = def;
                        if (openStates[(Material)matEditor.target][fullPath])
                            using (new GUILayout.VerticalScope(HelpBoxStyle(true, true, false)))
                                uiItems.Where(x => x.fullPath.StartsWith(fullPath) && x.parentName == displayName && !x.isRoot && x.fullPath != fullPath).ToList().ForEach(x => x.DrawProperty());
                    }
                    
                    break;
                case UIType.Message:
                    GUILayout.Label(displayName.Substring(2, displayName.Length-2), "HelpBox");
                    break;
            }
        }

        public void DrawInfo()
        {
            switch (uiType)
            {
                case UIType.Property:
                    if (materialProperty.flags != MaterialProperty.PropFlags.HideInInspector) GUILayout.Label($"{uiType} | {displayName} | {fullPath}");
                    break;
                case UIType.Block:
                    using (new GUILayout.VerticalScope("HelpBox"))
                    {
                        GUILayout.Label($"{uiType} | {displayName} | {fullPath}");
                        using (new GUILayout.VerticalScope("HelpBox"))
                            uiItems.Where(x =>
                                x.fullPath.StartsWith(fullPath) && 
                                x.isRoot == false &&
                                x.fullPath != fullPath).ToList().ForEach(x => x.DrawInfo());
                    }
                    break;
                case UIType.Message:
                    GUILayout.Label($"{uiType} | {displayName} | {fullPath}");
                    break;
            }
        }
    }
    #endregion

    private static void Credits(bool both, string shaderBy, string discord, string editorBy = null)
    {
        using var scope = new GUILayout.HorizontalScope(HelpBoxStyle());
        if (!both)
        {
            GUILayout.Label($"Shader By: {shaderBy}");
            GUILayout.Label($"Editor By: {editorBy}");
        }
        else
        {
            GUILayout.Label($"Shader and Editor By: {shaderBy}");
            GUILayout.FlexibleSpace();
            GUILayout.Label($"Discord: {discord}");
        }
    }

    private static string currentHash;
    private static bool didCheck;
    private const string githubURL = "https://raw.githubusercontent.com/NeonGamer/ShaderUIScript/refs/heads/main/NeonsShaderGUI";
    private const string fileLoco = "Assets/NeonGamer/Shaders/EyeShaders/!Assets/NeonsShaderGUI.cs";

    private static string Sha256Hex(string randomString)
    {
        var crypt = new SHA256Managed();
        var hash = new StringBuilder();
        byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(randomString));
        foreach (byte theByte in crypto)
        {
            hash.Append(theByte.ToString("x2"));
        }
        return hash.ToString();
    }
    private static string GetOnlineVersion()
    {
        using var wc = new WebClient();
        return wc.DownloadString(githubURL);
    }
    private static void AutoUpdate()
    {
        currentHash = Sha256Hex(File.ReadAllText(fileLoco));

        var newCode = GetOnlineVersion();
        var onlineHashStr = Sha256Hex(newCode);

        if (currentHash != onlineHashStr)
        {
            File.WriteAllText(fileLoco, newCode);
            AssetDatabase.Refresh();
            Debug.Log("Shader GUI updated!");
        }
        else
        {
            Debug.Log("Shader GUI up to date!");
            /*if (PlayerPrefs.GetInt("dontShowAgain") == 0) 
                AnnouncementWindow.Init(1000, 700);*/
        }
        
        didCheck = true;
    }
    
    public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties)
    {
        if(!didCheck) AutoUpdate();
        
        uiItems.Clear();
        foreach (var currProp in properties)
        {
            var path = currProp.displayName.Split('/');

            for (int i = 0; i < path.Length; i++)
            {
                var fullPath = currProp.displayName.Substring(0, currProp.displayName.LastIndexOf(path[i], StringComparison.Ordinal) + path[i].Length);
                if (i != path.Length - 1 && !uiItems.Select(x => x.fullPath).Contains(fullPath))
                {
                    uiItems.Add(new GUIItem(materialEditor,
                        properties.FirstOrDefault(x => x.displayName == $"{path[i]} Block"),
                        path[i],
                        path[i - 1 == -1 ? 0 : i - 1],
                        fullPath,
                        UIType.Block,
                        i == 0));
                }
                else if (path[i].StartsWith("::") && i == path.Length - 1)
                {
                    uiItems.Add(new GUIItem(materialEditor, currProp, path[i], path[i - 1 == -1 ? 0 : i - 1], currProp.displayName, UIType.Message, i == 0));
                }
                else if (i == path.Length - 1)
                    uiItems.Add(new GUIItem(materialEditor, currProp, path[i], path[i - 1 == -1 ? 0 : i - 1], currProp.displayName, UIType.Property, i == 0));
            }
        }

        foreach (var item in uiItems.Where(x => x.uiType == UIType.Block && x.isRoot))
        {
            item.DrawProperty();
        }

        using (new GUILayout.HorizontalScope())
        {
            ((Material)materialEditor.target).renderQueue = EditorGUILayout.IntField("Render Queue", ((Material)materialEditor.target).renderQueue);
            if (GUILayout.Button("Reset", GUILayout.Width(60))) ((Material)materialEditor.target).renderQueue = -1;
        }

        using (new BGColorScope(Color.gray))
        {
            using (new GUILayout.HorizontalScope())
            {
                if (GUILayout.Button("Check For Updates")) AutoUpdate();
                if (GUILayout.Button("Show Announcement")) AnnouncementWindow.Init(1000, 700);
            }

            Credits(true, "Neon", "hlsl");
            using (new EditorGUILayout.HorizontalScope("HelpBox"))
                GUILayout.Label(currentHash);
        }
        
        //Debug
        /*using (new GUILayout.VerticalScope("HelpBox"))
        {
            foreach (var item in uiItems.Where(x => x.isRoot))
            {
                item.DrawInfo();
            }
        }*/
    }
    
    private class BGColorScope : IDisposable
    {
        private Color ogCol;
        public BGColorScope(Color color)
        {
            ogCol = GUI.backgroundColor;
            GUI.backgroundColor = color;
        }

        public void Dispose()
        {
            GUI.backgroundColor = ogCol;
        }
    }
    
    internal static void PostShaderFeedback(string title, string desc, string col)
    {
        using var client = new HttpClient();
        var data = new DiscordData(title, desc, int.Parse(col, System.Globalization.NumberStyles.HexNumber));
        var strData = JsonUtility.ToJson(data);
        var content = new StringContent(strData, Encoding.UTF8, "application/json");
        client.PostAsync(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wdGIuZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEzODc1NjcyMDc5MDY1NDE2ODkvc0pwSmVBTzU1WUJEbFhoMGxVVWpGVnJCX2VWWEV0RDFXRFl0YU8xMDM4aVhyUDFyTkRtMnZMNDdKNVh6elA1QnN3VGk=")), content).GetAwaiter().GetResult();
    }
}
#endif
